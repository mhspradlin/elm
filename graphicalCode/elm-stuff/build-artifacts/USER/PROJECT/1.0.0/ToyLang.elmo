Elm.ToyLang = Elm.ToyLang || {};
Elm.ToyLang.make = function (_elm) {
   "use strict";
   _elm.ToyLang = _elm.ToyLang || {};
   if (_elm.ToyLang.values)
   return _elm.ToyLang.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "ToyLang",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $List = Elm.List.make(_elm),
   $Result = Elm.Result.make(_elm),
   $String = Elm.String.make(_elm);
   var toForm = function (token) {
      return function () {
         switch (token.ctor)
         {case "Square":
            switch (token._0.ctor)
              {case "_Tuple2":
                 switch (token._1.ctor)
                   {case "_Tuple2":
                      return function () {
                           var form = $Graphics$Collage.move({ctor: "_Tuple2"
                                                             ,_0: token._0._0
                                                             ,_1: token._1._0})($Graphics$Collage.filled($Color.lightBlue)($Graphics$Collage.square(40)));
                           return {ctor: "_Tuple3"
                                  ,_0: form
                                  ,_1: token._0._1
                                  ,_2: token._1._1};
                        }();}
                   break;}
              break;}
         _U.badCase($moduleName,
         "between lines 89 and 92");
      }();
   };
   var isAnd = function (token) {
      return function () {
         switch (token.ctor)
         {case "And": return true;}
         return false;
      }();
   };
   var findArgPos = function (instr) {
      return function () {
         var _v8 = A2($String.indexes,
         " ",
         instr);
         switch (_v8.ctor)
         {case "::": switch (_v8._1.ctor)
              {case "::":
                 return {ctor: "_Tuple2"
                        ,_0: _v8._0 + 1
                        ,_1: _v8._1._0 + 1};}
              break;}
         return {ctor: "_Tuple2"
                ,_0: -1
                ,_1: -1};
      }();
   };
   var And = {ctor: "And"};
   var and = function (instr) {
      return function () {
         var _v13 = A2($String.left,
         3,
         instr);
         switch (_v13)
         {case "":
            return $Result.Err("Empty");
            case "and":
            return $Result.Ok(And);}
         return $Result.Err("Invalid input");
      }();
   };
   var Square = F2(function (a,b) {
      return {ctor: "Square"
             ,_0: a
             ,_1: b};
   });
   var square = function (instr) {
      return function () {
         var _v14 = A2($String.left,
         6,
         instr);
         switch (_v14)
         {case "":
            return $Result.Err("Empty");
            case "square":
            return function () {
                 var _v15 = $List.map($String.toFloat)($List.take(2)($List.drop(1)(A2($String.split,
                 " ",
                 instr))));
                 switch (_v15.ctor)
                 {case "::":
                    switch (_v15._1.ctor)
                      {case "[]":
                         return $Result.Err("Only one argument to square given");}
                      switch (_v15._0.ctor)
                      {case "Err":
                         switch (_v15._1.ctor)
                           {case "::":
                              switch (_v15._1._1.ctor)
                                {case "[]":
                                   return $Result.Err(_v15._0._0);}
                                break;}
                           break;}
                      switch (_v15._1.ctor)
                      {case "::":
                         switch (_v15._1._0.ctor)
                           {case "Err":
                              switch (_v15._1._1.ctor)
                                {case "[]":
                                   return $Result.Err(_v15._1._0._0);}
                                break;}
                           break;}
                      switch (_v15._0.ctor)
                      {case "Ok":
                         switch (_v15._1.ctor)
                           {case "::":
                              switch (_v15._1._0.ctor)
                                {case "Ok":
                                   switch (_v15._1._1.ctor)
                                     {case "[]": return function () {
                                             var $ = findArgPos(instr),
                                             xpos = $._0,
                                             ypos = $._1;
                                             return $Result.Ok(A2(Square,
                                             {ctor: "_Tuple2"
                                             ,_0: _v15._0._0
                                             ,_1: xpos},
                                             {ctor: "_Tuple2"
                                             ,_0: _v15._1._0._0
                                             ,_1: ypos}));
                                          }();}
                                     break;}
                                break;}
                           break;}
                      break;
                    case "[]":
                    return $Result.Err("Not enough arguments to square");}
                 _U.badCase($moduleName,
                 "between lines 34 and 41");
              }();}
         return $Result.Err("Invalid input");
      }();
   };
   var shiftIndices = F2(function (shamt,
   l) {
      return function () {
         switch (l.ctor)
         {case "::": switch (l._0.ctor)
              {case "And":
                 return A2($List._op["::"],
                   And,
                   A2(shiftIndices,shamt,l._1));
                 case "Square":
                 switch (l._0._0.ctor)
                   {case "_Tuple2":
                      switch (l._0._1.ctor)
                        {case "_Tuple2":
                           return A2($List._op["::"],
                             A2(Square,
                             {ctor: "_Tuple2"
                             ,_0: l._0._0._0
                             ,_1: l._0._0._1 + shamt},
                             {ctor: "_Tuple2"
                             ,_0: l._0._1._0
                             ,_1: l._0._1._1 + shamt}),
                             A2(shiftIndices,shamt,l._1));}
                        break;}
                   break;}
              break;
            case "[]":
            return _L.fromArray([]);}
         return _L.fromArray([]);
      }();
   });
   var tokenize = function (instr) {
      return function () {
         var _v37 = {ctor: "_Tuple2"
                    ,_0: square(instr)
                    ,_1: and(instr)};
         switch (_v37.ctor)
         {case "_Tuple2":
            switch (_v37._0.ctor)
              {case "Err":
                 switch (_v37._1.ctor)
                   {case "Ok":
                      return A2($List._op["::"],
                        _v37._1._0,
                        shiftIndices(3)(tokenize(A2($String.dropLeft,
                        3,
                        instr))));}
                   break;
                 case "Ok": switch (_v37._1.ctor)
                   {case "Err":
                      return function () {
                           var _v44 = A2($String.indexes,
                           " ",
                           instr);
                           switch (_v44.ctor)
                           {case "::":
                              switch (_v44._1.ctor)
                                {case "::":
                                   switch (_v44._1._1.ctor)
                                     {case "::":
                                        return A2($List._op["::"],
                                          _v37._0._0,
                                          shiftIndices(_v44._1._1._0)(tokenize(A2($String.dropLeft,
                                          _v44._1._1._0,
                                          instr))));
                                        case "[]":
                                        return A2($List._op["::"],
                                          _v37._0._0,
                                          _L.fromArray([]));}
                                     break;}
                                break;}
                           _U.badCase($moduleName,
                           "between lines 72 and 76");
                        }();}
                   break;}
              break;}
         return function () {
            var _v51 = A2($String.left,
            1,
            instr);
            switch (_v51)
            {case "":
               return _L.fromArray([]);
               case " ":
               return shiftIndices(1)(tokenize(A2($String.dropLeft,
                 1,
                 instr)));}
            return _L.fromArray([]);
         }();
      }();
   };
   var parse = function (code) {
      return $List.map(toForm)(A2($List.filter,
      function ($) {
         return $Basics.not(isAnd($));
      },
      tokenize(code)));
   };
   _elm.ToyLang.values = {_op: _op
                         ,Square: Square
                         ,And: And
                         ,square: square
                         ,findArgPos: findArgPos
                         ,and: and
                         ,shiftIndices: shiftIndices
                         ,tokenize: tokenize
                         ,isAnd: isAnd
                         ,toForm: toForm
                         ,parse: parse};
   return _elm.ToyLang.values;
};